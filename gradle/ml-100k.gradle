import org.lenskit.burndown.FetchDataset
import org.lenskit.gradle.*

task fetchML100K(type: FetchDataset, group: 'fetch') {
    description 'Fetch MovieLens 100K data set'
    srcUrl 'http://files.grouplens.org/datasets/movielens/ml-100k.zip'
    dataDir 'data/ml-100k'
}

task crossfoldML100K(type: Crossfold, group: 'crossfold') {
    dependsOn fetchML100K
    outputDir "$buildDir/crossfold/ml-100k"

    input textFile {
        file 'data/ml-100k/u.data'
        delimiter '\t'
        domain {
            minimum 1.0
            maximum 5.0
            precision 1.0
        }
    }
    holdout 5
    partitionCount 5
    outputFormat 'PACK'
    includeTimestamps false
}

task evaluateCommonML100K(type: TrainTest, group: 'evaluate') {
    dataSet crossfoldML100K
    if (useEvalCache) {
        cacheDirectory "$buildDir/eval-cache"
    }
    algorithm 'cfg/common-algos.groovy'
    outputFile "$buildDir/common-ml-100k.csv"
    configure commonMetrics
}

task sweepItemItemML100K(type: TrainTest, group: 'evaluate') {
    dataSet crossfoldML100K
    if (useEvalCache) {
        cacheDirectory "$buildDir/eval-cache"
    }
    outputFile "$buildDir/sweep-item-item-ml-100k.csv"
    algorithm 'cfg/sweep-item-item.groovy'
    configure commonMetrics
}

task sweepFunkSVDML100K(type: TrainTest, group: 'evaluate') {
    dataSet crossfoldML100K
    if (useEvalCache) {
        cacheDirectory "$buildDir/eval-cache"
    }
    outputFile "$buildDir/sweep-funksvd-ml-100k.csv"
    algorithm 'cfg/sweep-funksvd.groovy'
    configure commonMetrics
}

task allML100K(group: 'meta') {
    description 'Run all ML100K experiments'
    dependsOn 'evaluateCommonML100K'
    dependsOn 'sweepItemItemML100K'
    dependsOn 'sweepFunkSVDML100K'
}

allExperiments.dependsOn allML100K
